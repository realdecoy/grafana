name: Deploy
#on a push to tags to trigger GitHub action workflow
on:
  push:
    tags:
      - 'dev-**'
      - 'temp-**'

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      # validate input
      - name: validate stage
        if: |
          github.event_name == 'workflow_dispatch' &&
          github.event.inputs.stage != 'dev' &&
          github.event.inputs.stage != 'temp'
        run: |
          echo "Stage must be: 'dev' or 'temp'" 2>&1
          exit 1

      - name: configure environment
        uses: actions/checkout@v1

      # configure environment
      - name: set environment for deployment (dev)
        if: |
          ( github.event_name == 'workflow_dispatch' && github.event.inputs.stage == 'dev' ) ||
          ( github.event_name != 'workflow_dispatch' && contains(github.ref, 'refs/tags/dev') )
        run: |
          echo "STAGE=dev" >> $GITHUB_ENV
          echo "API_ENDPOINT=${{ secrets.ENDPOINT_DEV }}" >> $GITHUB_ENV
          echo "SSH_KEY=${{ secrets.SSH_KEY_DEV }}" >> $GITHUB_ENV
          echo "SSH_HOST=${{ secrets.SSH_HOST_DEV }}" >> $GITHUB_ENV

      - name: set environment for deployment (temp)
        if: |
          ( github.event_name == 'workflow_dispatch' && github.event.inputs.stage == 'temp' ) ||
          ( github.event_name != 'workflow_dispatch' && contains(github.ref, 'refs/tags/temp') )
        run: |
          echo "STAGE=temp" >> $GITHUB_ENV
          echo "API_ENDPOINT=${{ secrets.API_ENDPOINT }}" >> $GITHUB_ENV
          echo "SSH_KEY='$(echo ${{ secrets.SSH_KEY }} | awk -v ORS='\\n' '1')'" >> $GITHUB_ENV
          echo "SSH_HOST=${{ secrets.SSH_HOST }}" >> $GITHUB_ENV

      - name: branch name
        run: echo running on ${{ env.STAGE }}

      - name: deploy ${{ env.STAGE }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd /grafana
            git fetch
            git checkout dev
            git pull
            echo "export const API_ENDPOINT = ${{ env.API_ENDPOINT }};" > './public/app/core/env.ts'
            bash grafana-deploy-script.sh
